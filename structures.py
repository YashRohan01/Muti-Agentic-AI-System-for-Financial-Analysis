from pydantic import BaseModel, Field
from typing import List, Dict, Optional, Literal
from tools import get_metric_for_all_ciks, get_relevant_douments

class Query_Validator(BaseModel):
    """
    Represents the type of the user query: simple or Complex
    """ 

    type: Literal["simple", "complex"] = Field(description="simple if a basic RAG search can answer the query, else complex")
    ciks: List[str] = Field(description="Has all the ciks that the query requires") 
    explanation: str = Field(description="Tells why the query is either complex or simple.")
    query: str = Field("The input user query as it is")

class RAG_Agent(BaseModel):
    """
    Represents the output of the simple query by implementing basic RAG implementation
    """

    rag_report : str = Field(description="Content of the report generated for the user query. Having in detail explanation with highlighted points and descriptive bullet points. It should be a text file for good rendering")

class RAG_Reporter_Agent(BaseModel):
    rag_report_code: str = Field(description="It is the python reportlab code for the rag_report")

class RAG_Concise_Agent(BaseModel):
    """
    Summarizes the final Answer
    """
    points : List[str] = Field(description="Each string is a separate bullet point")

class Task_Allocator(BaseModel):
    """
    Decides what all tasks does the query require from Financial Metric Analysis, Narrative Analysis, Predictive Analysis 
    """
    tasks: Optional[List[Literal["narrative_analysis", "financial_metric_analysis", "predictive_analysis"]]] = Field(
        default=None,
        description="A list of tasks to be executed. Multiple values from the three options can be included."
    ) 
    ciks: List[str] = Field(description="Has all the ciks that the query requires") 
    companies: List[str] = Field(description="Corresponds to the cik to the name if the comapny")
    metrics: Optional[List[str]] = Field(default=None,description="what all financial metrics are required to answer the given query")
    start_date: Optional[str] = Field(
        default=None,
        description="""The starting date for the data query in 'YYYY-MM-DD' format, if specified or implied by the user.
                     For queries like 'last 5 years', infer the appropriate start date relative to the current date (e.g., today is 2025-06-09, so 'last 5 years' would be 2020-06-09).
                     If not specified and no timeframe is implied, set to None."""
    )
    end_date: Optional[str] = Field(
        default=None,
        description="""The ending date for the data query in 'YYYY-MM-DD' format, if specified or implied by the user.
                     For queries like 'last 5 years', infer the current date as the end date.
                     If not specified, set to None, implying up to the latest available data."""
    )
    explanation : str = Field(description="a brief information about what all tasks are to be done and what should be their output")
    query: str = Field("The input user query as it is")

class Financial_Analyzer(BaseModel):
    financial_metric_report: List[str] = Field(description="It includes the text that will go in the final report, along with metric information. It analyzez the data and decides whether it's a good trend or a bad trend")
    require_visualization: bool = Field(description="Infer from the query whether visualization is required or not")
    require_summarization: bool = Field(description="Infer from the qury whether analysis/summarization of the company's metric is required")

class Financial_Performance_Analyer(BaseModel):
    performance_report: List[str] = Field(description="Includes the performance summary to be included in the report")

class Narrative_Analyzer(BaseModel):
    narrative_report : List[str] = Field(description="Represents the content that is generated summarizing the retireved documents such that it can be used in the report. It has .md format")
    require_strategic_recommendation: bool = Field(description="It infers from the query whether strategic recommendations are required to answer the query")
    require_risk_analysis: bool = Field(description="It infers from the query whether risk analysis is required to answer the query")

class Stratergy_Recommending_Agent(BaseModel):
    recommendation_report: List[str] = Field(description="It refers to the string generated by the Agent that will be in the final pdf")

class Risk_Analyzer(BaseModel):
    risk_analysis_report: List[str] = Field(description="analyze the risk associate with the given user query to be included in the report.")

class Prediction_Analyzer(BaseModel):
    prediction_report : str = Field(description="Includes the future values of datas and explains the implications of it.")

class Metric_Information(BaseModel):
    """
    Extracts key information from a user query to identify relevant financial metrics,
    companies, and timeframes for data retrieval and visualization.
    """
    metric_names: List[str] = Field(
        description="""A list of financial metrics that best represent the user's query.
                     These should be the exact XBRL tags or labels available in the financial database.
                     If the user asks for a general concept (e.g., 'earnings'), map it to specific available metrics like 'NetIncomeLoss', 'EarningsPerShareBasic'.
                     If no specific metrics are mentioned but visualization is implied, suggest common financial metrics like 'Revenue', 'NetIncomeLoss'."""
    )
    company_names: List[str] = Field(
        description="""A list of company names relevant to the query.
                     These should correspond to full company names as found in your loaded company information (e.g., 'Apple Inc.', 'Microsoft Corp')."""
    )
    company_ciks: List[str] = Field(
        description="""A list of the CIKs of all the companies in the company_names.
                    These should be the exact match of the company names returned from the list provided"""
    )
    start_date: Optional[str] = Field(
        default=None,
        description="""The starting date for the data query in 'YYYY-MM-DD' format, if specified or implied by the user.
                     For queries like 'last 5 years', infer the appropriate start date relative to the current date (e.g., today is 2025-06-09, so 'last 5 years' would be 2020-06-09).
                     If not specified and no timeframe is implied, set to None."""
    )
    end_date: Optional[str] = Field(
        default=None,
        description="""The ending date for the data query in 'YYYY-MM-DD' format, if specified or implied by the user.
                     For queries like 'last 5 years', infer the current date as the end date.
                     If not specified, set to None, implying up to the latest available data."""
    )
    fiscal_years: Optional[List[int]] = Field(
        default=None,
        description="""A list of specific fiscal years requested by the user (e.g., [2022, 2023]).
                     This should be used if the user explicitly asks for data in certain fiscal years, overriding date ranges if present."""
    )
    fiscal_periods: Optional[List[str]] = Field(
        default=None,
        description="""A list of specific fiscal periods requested by the user (e.g., ['Q1', 'FY']).
                     This should be used if the user explicitly asks for data in certain fiscal periods."""
    )
    visualization_type: Optional[str] = Field(
        default=None,
        description="""The preferred type of chart for visualization, inferred from the user's query.
                     Examples: 'line chart', 'bar graph', 'pie chart', 'scatter plot', 'stacked bar-graph', 'doughnut chart'.
                     Set it to the most relevant type of visualization if the data is visualizable.
                     Set to None if the query does not imply a visualization or if the data is better presented as raw facts."""
    )
    explanation: str = Field(
        description="A brief explanation of how the extracted information addresses the user's original query and why these choices were made."
    )

class Data_Visualizer(BaseModel):
    """
    Represents Python code to be executed.
    """
    code: str = Field(description="The Python-matplotlib code string to be executed.")
    possible_errors: str = Field(description="Contains what all errors can come in the given code")
    file_names : List[str] = Field(description="The file_names of the plots generated by the code (this will help us to keep track of images)")

class Report_Writer_Agent(BaseModel):
    """
    Represents the final output of the complex chain where a .md report is generated
    """
    report_code: str = Field(description="The python code to generate and save a financial report as a .md file")

class Concise_Answer_Agent(BaseModel):
    """
    Summarizes the final Answer
    """
    points : List[str] = Field(description="Each string is a separate bullet point")
